require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe ResearchAndTeachingExperiencesController do

  def mock_research_and_teaching_experience(stubs={})
    @mock_research_and_teaching_experience ||= mock_model(ResearchAndTeachingExperience, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all research_and_teaching_experiences as @research_and_teaching_experiences" do
      ResearchAndTeachingExperience.stub(:all) { [mock_research_and_teaching_experience] }
      get :index
      assigns(:research_and_teaching_experiences).should eq([mock_research_and_teaching_experience])
    end
  end

  describe "GET show" do
    it "assigns the requested research_and_teaching_experience as @research_and_teaching_experience" do
      ResearchAndTeachingExperience.stub(:find).with("37") { mock_research_and_teaching_experience }
      get :show, :id => "37"
      assigns(:research_and_teaching_experience).should be(mock_research_and_teaching_experience)
    end
  end

  describe "GET new" do
    it "assigns a new research_and_teaching_experience as @research_and_teaching_experience" do
      ResearchAndTeachingExperience.stub(:new) { mock_research_and_teaching_experience }
      get :new
      assigns(:research_and_teaching_experience).should be(mock_research_and_teaching_experience)
    end
  end

  describe "GET edit" do
    it "assigns the requested research_and_teaching_experience as @research_and_teaching_experience" do
      ResearchAndTeachingExperience.stub(:find).with("37") { mock_research_and_teaching_experience }
      get :edit, :id => "37"
      assigns(:research_and_teaching_experience).should be(mock_research_and_teaching_experience)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created research_and_teaching_experience as @research_and_teaching_experience" do
        ResearchAndTeachingExperience.stub(:new).with({'these' => 'params'}) { mock_research_and_teaching_experience(:save => true) }
        post :create, :research_and_teaching_experience => {'these' => 'params'}
        assigns(:research_and_teaching_experience).should be(mock_research_and_teaching_experience)
      end

      it "redirects to the created research_and_teaching_experience" do
        ResearchAndTeachingExperience.stub(:new) { mock_research_and_teaching_experience(:save => true) }
        post :create, :research_and_teaching_experience => {}
        response.should redirect_to(research_and_teaching_experience_url(mock_research_and_teaching_experience))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved research_and_teaching_experience as @research_and_teaching_experience" do
        ResearchAndTeachingExperience.stub(:new).with({'these' => 'params'}) { mock_research_and_teaching_experience(:save => false) }
        post :create, :research_and_teaching_experience => {'these' => 'params'}
        assigns(:research_and_teaching_experience).should be(mock_research_and_teaching_experience)
      end

      it "re-renders the 'new' template" do
        ResearchAndTeachingExperience.stub(:new) { mock_research_and_teaching_experience(:save => false) }
        post :create, :research_and_teaching_experience => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested research_and_teaching_experience" do
        ResearchAndTeachingExperience.stub(:find).with("37") { mock_research_and_teaching_experience }
        mock_research_and_teaching_experience.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :research_and_teaching_experience => {'these' => 'params'}
      end

      it "assigns the requested research_and_teaching_experience as @research_and_teaching_experience" do
        ResearchAndTeachingExperience.stub(:find) { mock_research_and_teaching_experience(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:research_and_teaching_experience).should be(mock_research_and_teaching_experience)
      end

      it "redirects to the research_and_teaching_experience" do
        ResearchAndTeachingExperience.stub(:find) { mock_research_and_teaching_experience(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(research_and_teaching_experience_url(mock_research_and_teaching_experience))
      end
    end

    describe "with invalid params" do
      it "assigns the research_and_teaching_experience as @research_and_teaching_experience" do
        ResearchAndTeachingExperience.stub(:find) { mock_research_and_teaching_experience(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:research_and_teaching_experience).should be(mock_research_and_teaching_experience)
      end

      it "re-renders the 'edit' template" do
        ResearchAndTeachingExperience.stub(:find) { mock_research_and_teaching_experience(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested research_and_teaching_experience" do
      ResearchAndTeachingExperience.stub(:find).with("37") { mock_research_and_teaching_experience }
      mock_research_and_teaching_experience.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the research_and_teaching_experiences list" do
      ResearchAndTeachingExperience.stub(:find) { mock_research_and_teaching_experience }
      delete :destroy, :id => "1"
      response.should redirect_to(research_and_teaching_experiences_url)
    end
  end

end
