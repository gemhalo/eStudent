require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe EmploymentInformationsController do

  def mock_employment_information(stubs={})
    @mock_employment_information ||= mock_model(EmploymentInformation, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all employment_informations as @employment_informations" do
      EmploymentInformation.stub(:all) { [mock_employment_information] }
      get :index
      assigns(:employment_informations).should eq([mock_employment_information])
    end
  end

  describe "GET show" do
    it "assigns the requested employment_information as @employment_information" do
      EmploymentInformation.stub(:find).with("37") { mock_employment_information }
      get :show, :id => "37"
      assigns(:employment_information).should be(mock_employment_information)
    end
  end

  describe "GET new" do
    it "assigns a new employment_information as @employment_information" do
      EmploymentInformation.stub(:new) { mock_employment_information }
      get :new
      assigns(:employment_information).should be(mock_employment_information)
    end
  end

  describe "GET edit" do
    it "assigns the requested employment_information as @employment_information" do
      EmploymentInformation.stub(:find).with("37") { mock_employment_information }
      get :edit, :id => "37"
      assigns(:employment_information).should be(mock_employment_information)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created employment_information as @employment_information" do
        EmploymentInformation.stub(:new).with({'these' => 'params'}) { mock_employment_information(:save => true) }
        post :create, :employment_information => {'these' => 'params'}
        assigns(:employment_information).should be(mock_employment_information)
      end

      it "redirects to the created employment_information" do
        EmploymentInformation.stub(:new) { mock_employment_information(:save => true) }
        post :create, :employment_information => {}
        response.should redirect_to(employment_information_url(mock_employment_information))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved employment_information as @employment_information" do
        EmploymentInformation.stub(:new).with({'these' => 'params'}) { mock_employment_information(:save => false) }
        post :create, :employment_information => {'these' => 'params'}
        assigns(:employment_information).should be(mock_employment_information)
      end

      it "re-renders the 'new' template" do
        EmploymentInformation.stub(:new) { mock_employment_information(:save => false) }
        post :create, :employment_information => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested employment_information" do
        EmploymentInformation.stub(:find).with("37") { mock_employment_information }
        mock_employment_information.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :employment_information => {'these' => 'params'}
      end

      it "assigns the requested employment_information as @employment_information" do
        EmploymentInformation.stub(:find) { mock_employment_information(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:employment_information).should be(mock_employment_information)
      end

      it "redirects to the employment_information" do
        EmploymentInformation.stub(:find) { mock_employment_information(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(employment_information_url(mock_employment_information))
      end
    end

    describe "with invalid params" do
      it "assigns the employment_information as @employment_information" do
        EmploymentInformation.stub(:find) { mock_employment_information(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:employment_information).should be(mock_employment_information)
      end

      it "re-renders the 'edit' template" do
        EmploymentInformation.stub(:find) { mock_employment_information(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested employment_information" do
      EmploymentInformation.stub(:find).with("37") { mock_employment_information }
      mock_employment_information.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the employment_informations list" do
      EmploymentInformation.stub(:find) { mock_employment_information }
      delete :destroy, :id => "1"
      response.should redirect_to(employment_informations_url)
    end
  end

end
