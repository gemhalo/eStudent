require "yaml"
require "active_support"
require "active_support/core_ext/string/inflections"
require "active_record"
require "active_record/fixtures"
require "rails/generators"

module Dummy
  module Generators
    class DataGenerator < Rails::Generators::Base  
      include Dummy::Generators::Common
              
      def self.source_root
        @source_root ||= File.expand_path("../templates", __FILE__)
      end
      
      class_option :base_amount, :type => :numeric, :default => 10,
                  :desc => "The base amount of records to generate for each model."
      class_option :growth_ratio, :type => :numeric, :default => 2.0,
                  :desc => "The growth ratio of each model, according to its associations."
      class_option :manual_amounts, :type => :boolean, :default => false,
                  :desc => "Manually set the amount of records for each model."
      class_option :output_folder, :type => :string, :default => "test/dummy",
                  :desc => "Dummy output folder, data/ will be used when storing the resulting YAML files."

      def install_dummy_data
        initialize_application
        generate_dummy_data
        copy_rake_file
        create_dummyfile
      end

    private
    
      def initialize_application
        require File.expand_path("#{Rails.root}/config/environment.rb")
        say_status :successful, "initialize Rails application"
      end

      def generate_dummy_data
        get_table_names
        gather_associations
        predict_record_amounts
        generate_and_write_data
      end

      def get_table_names
        @models = Hash.new
        Dir["app/models/*.rb"].each do |full_path|
          model = File.basename(full_path).chomp(File.extname(full_path)).camelcase.constantize
          @models.merge!({model => {
            :record_amount => 0, :associations => []
          }}) if model.respond_to?(:columns)
        end
      end

      def predict_record_amounts
        models = @models.dup
        models.each do |model, info|
          predict_record_amount(model, info, models, [])
        end
      end

      def predict_record_amount(model, info, models, stacked_models)
        info[:associations].each do |assoc|
          next if stacked_models.include?(assoc[:model])

          if model != assoc[:model]
            stacked_models << assoc[:model]
            predict_record_amount(assoc[:model], @models[assoc[:model]], models, stacked_models)
          end
        end

        amount = options.base_amount
        if not info[:associations].empty?
          amount = info[:associations].map do |assoc|
            @models[assoc[:model]][:record_amount]
          end.max * options.growth_ratio # **info[:associations].size
        end
        
        if options.manual_amounts
          user_defined = ask("Number of records for #{model} (default: #{amount}): ")
          amount = user_defined unless user_defined.empty?
        end

        @models[model][:record_amount] = amount.to_i
        stacked_models.delete(model)
        models.delete(model)
      end

      def generate_and_write_data
        empty_directory "#{options.output_folder}/data"
        data = Hash.new

        @models.each do |model, info|
          name = model.to_s.underscore
          
          (0..info[:record_amount]-1).each do |num|
            key_value = Hash.new
            fixture_data = Hash.new

            model.columns.each do |column|
              key_value = generate_record_data(name, info, column)
              fixture_data.merge!(key_value) unless key_value.nil?
            end
            
            data[model.table_name] = Hash.new if data[model.table_name].nil?
            data[model.table_name].merge!({ "#{name}_#{num}" => fixture_data })
          end

          say_status :successful, "generate #{info[:record_amount]} records for '#{name}'"
        end
        
        data.each do |name, fixtures|
          content = "# '#{name}' data generated automatically by dummy at #{Time.now.strftime("%H:%M %m/%d/%Y")} (#{fixtures.size} records).\n"
          
          content << YAML.dump(fixtures)
          
          create_file "#{options.output_folder}/data/#{name}.yml", content
        end
        say_status :successful, "store fixtures"
      end 

      def copy_rake_file
        template "dummy_data.rake", "lib/tasks/dummy_data.rake"
      end
      
      def create_dummyfile
        data = Hash.new
        dummyfile_path = "#{options.output_folder}/Dummyfile"
        
        @models.each do |model, info|
          data[model.to_s.underscore.pluralize] = {:records => info[:record_amount]}
        end
        
        content = "# This file was automatically generated by Dummy. Do NOT change it.\n"        
        content << YAML.dump(data)
        
        remove_file dummyfile_path, :verbose => false if File.exists?(dummyfile_path)
        create_file dummyfile_path, content
      end
    end
  end
end

